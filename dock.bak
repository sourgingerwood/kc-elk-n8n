services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ecp-elasticsearch-security-setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:z
      - ./kibana/kibana.yml:/usr/share/elasticsearch/kibana.yml:z
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - ecp-fleet-server\n"\
          "    ip:\n"\
          "      - 10.10.10.130\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - ecp-elasticsearch\n"\
          "    ip:\n"\
          "      - 172.40.0.10\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - ecp-kibana\n"\
          "    ip:\n"\
          "      - 172.40.0.30\n"\
          "  - name: holder\n"\
          "    dns:\n"\
          "      - ecp-holder\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
          cat config/certs/elasticsearch/elasticsearch.crt config/certs/ca/ca.crt > config/certs/elasticsearch/elasticsearch.chain.pem
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl --cacert config/certs/ca/ca.crt http://ecp-elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" http://ecp-elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "writing fingerprint to kibana.yml";
        FINGERPRINT=$$(openssl x509 -noout -fingerprint -sha256 -in config/certs/ca/ca.crt | cut -d'=' -f2 | tr -d ':')
        sed "s/^    ca_trusted_fingerprint:.*/    ca_trusted_fingerprint: $$FINGERPRINT/" /usr/share/elasticsearch/kibana.yml > /tmp/kibana.yml && cat /tmp/kibana.yml > /usr/share/elasticsearch/kibana.yml
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      cttn:
        ipv4_address: 172.40.0.5

#  ssh-server:
#    image: linuxserver/openssh-server
#    container_name: ssh-server
#    ports:
#      - "2222:2222"  # Host port â†’ Container SSH port
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Etc/UTC
#      - PASSWORD_ACCESS=true
#      - USER_NAME=manou
#      - USER_PASSWORD=manou
#    volumes:
#      - ./ssh_config/authorized_keys:/root/.ssh/authorized_keys:ro
#    restart: unless-stopped

  server:
    depends_on:
      setup:
        condition: service_healthy
    image: nginx:alpine
    container_name: CA
    ports:
      - "7777:80"
    volumes:
      - certs:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    command: ["sh","-c","chmod -R +rx /usr/share/nginx/html && nginx -g 'daemon off;'"]

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ecp-elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:z
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    # restart: always
    environment:
      - node.name=ecp-elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.chain.pem
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.http.ssl.client_authentication=optional
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.client_authentication=optional
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://ecp-elasticsearch:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 7
    networks:
      cttn:
        ipv4_address: 172.40.0.10

  kibana:
    container_name: ecp-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs:z
      - kibanadata:/usr/share/kibana/data
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:Z
    ports:
      - ${KIBANA_PORT}:5601
    restart: always
    environment:
      - SERVER_NAME=ecp-kibana
      - ELASTICSEARCH_HOSTS=https://ecp-elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -k https://ecp-kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 7
    networks:
      cttn:
        ipv4_address: 172.40.0.30
volumes:
  certs:
    driver: local
#    driver_opts:
#      type: none
#      device: ./certs
  esdata01:
    driver: local
  kibanadata:
    driver: local
  fleetserverdata:
    driver: local

networks:
  cttn:
    ipam:
      config:
        - subnet: 172.40.0.0/24
          gateway: 172.40.0.1
