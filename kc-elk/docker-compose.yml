services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ecp-elasticsearch-security-setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:z
      - ./kibana/kibana.yml:/usr/share/elasticsearch/kibana.yml:z
    user: root
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - ecp-elasticsearch\n"\
          "    ip:\n"\
          "      - 172.40.0.11\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - ecp-kibana\n"\
          "    ip:\n"\
          "      - 172.40.0.33\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
          cat config/certs/elasticsearch/elasticsearch.crt config/certs/ca/ca.crt > config/certs/elasticsearch/elasticsearch.chain.pem
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl --cacert config/certs/ca/ca.crt https://ecp-elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://ecp-elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "writing fingerprint to kibana.yml";
        FINGERPRINT=$$(openssl x509 -noout -fingerprint -sha256 -in config/certs/ca/ca.crt | cut -d'=' -f2 | tr -d ':')
        sed "s/^    ca_trusted_fingerprint:.*/    ca_trusted_fingerprint: $$FINGERPRINT/" /usr/share/elasticsearch/kibana.yml > /tmp/kibana.yml && cat /tmp/kibana.yml > /usr/share/elasticsearch/kibana.yml
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      cttn:
        ipv4_address: 172.40.0.5

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.1
    user: root
    command: start-dev
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
    networks:
      cttn:
        ipv4_address: 172.40.0.44
    ports:
      - "8443:8443"
      - "8080:8080"
      - "9000:9000"
    volumes:
      - ./keycloak/conf:/opt/keycloak/conf:rw
      - ./keycloak/log:/opt/keycloak/log:rw
    healthcheck:
      test: ["CMD", "sh", "-c", "echo > /dev/tcp/localhost/9000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ecp-elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:z
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    # restart: always
    environment:
      - node.name=ecp-elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.chain.pem
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=none
      - xpack.security.http.ssl.client_authentication=optional
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=none
      - xpack.security.transport.ssl.client_authentication=optional
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://ecp-elasticsearch:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      cttn:
        ipv4_address: 172.40.0.11

  kibana:
    container_name: ecp-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs:z
      - kibanadata:/usr/share/kibana/data
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - ${KIBANA_PORT}:5601
    restart: always
    environment:
      - SERVER_NAME=ecp-kibana
      - ELASTICSEARCH_HOSTS=https://ecp-elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - SERVER_SSL_ENABLED=true
      - KBN_PATH_CONF=/usr/share/kibana/config
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -k https://ecp-kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 7
    networks:
      cttn:
        ipv4_address: 172.40.0.33

#### AGENT #####
  elastic-agent:
    image: docker.elastic.co/elastic-agent/elastic-agent-slim:9.0.0
    container_name: elastic-agent
    depends_on:
      - elasticsearch
      - kibana
    user: root
    volumes:
      - ./elastic-agent/elastic-agent.yml:/usr/share/elastic-agent/elastic-agent.yml:z
      - ./elastic-agent/certs:/usr/share/elastic-agent/certs:ro
      - ./keycloak/log/kc.log:/opt/keycloak/log/kc.log
    networks:
      cttn:
        ipv4_address: 172.40.0.66

#   nginx:
#     image: nginx:alpine
#     container_name: nginx_proxy
#     restart: always
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#       - ./nginx/certs:/etc/nginx/certs:ro
#     networks:
#       cttn:
#         ipv4_address: 172.40.0.70
  app:
    build:
      context: ./node-server
      dockerfile: app.Dockerfile
    container_name: my-node-app
    user: root
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - "5500:5500"
    volumes:
      - ./node-server:/usr/src/app
    command: sh -c "cd /usr/src/app/ && ./init_kc.sh && npm install && npm start"
    environment:
      - NODE_ENV=development
    networks:
      cttn:
        ipv4_address: 172.40.0.55

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin
      - N8N_PORT=5678
      - N8N_SECURE_COOKIE=false
      - WEBHOOK_URL=${N8N_URL}
      - GENERIC_TIMEZONE=Europe/Paris
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_PROTOCOL=https
#      - N8N_HOST=${N8N_HOST}
#      - N8N_EDITOR_BASE_URL=${N8N_URL}
#      - N8N_PUBLIC_API_BASE_URL=${N8N_URL}
      - WEBHOOK_TUNNEL_URL=${N8N_URL}
      - N8N_LOG_LEVEL=info
      - NODE_ENV=production
      - N8N_RUNNERS_ENABLED=true
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_GENERIC_TIMEZONE=Europe/Paris
      - N8N_REDIS_ENABLED=false
      - N8N_METRICS=true
      - N8N_ALLOW_ROOT=true
      - N8N_FLAGS=--tunnel --trust-proxy
    volumes:
      - n8n_data:/home/node/.n8n
      - /home/manou/kc-elk-n8n/kc-elk/.env:/home/.env:rw
    restart: always
    networks:
      cttn:
        ipv4_address: 172.40.0.88

volumes:
  n8n_data:
    driver: local
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  fleetserverdata:
    driver: local

networks:
  cttn:
    ipam:
      config:
        - subnet: 172.40.0.0/24
          gateway: 172.40.0.1
