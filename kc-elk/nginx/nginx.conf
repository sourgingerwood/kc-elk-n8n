events {}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    keepalive_timeout  65;

    ##############################################
    # REDIRECT HTTP TO HTTPS FOR ALL DOMAINS
    ##############################################

    server {
        listen 80;
        server_name app.ctt.tn kc.ctt.tn n8n.ctt.tn kibana.ctt.tn;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    ##############################################
    # HTTPS WITH SELF-SIGNED CERTIFICATE
    ##############################################

    server {
        listen 443 ssl;
        server_name app.ctt.tn;

        ssl_certificate     /etc/nginx/self-signed/ctt.crt;
        ssl_certificate_key /etc/nginx/self-signed/ctt.key;

        location / {
            proxy_pass https://localhost:5500;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name kc.ctt.tn;

        ssl_certificate     /etc/nginx/self-signed/ctt.crt;
        ssl_certificate_key /etc/nginx/self-signed/ctt.key;

        location / {
            proxy_pass https://localhost:8443;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name n8n.ctt.tn;

        ssl_certificate     /etc/nginx/self-signed/ctt.crt;
        ssl_certificate_key /etc/nginx/self-signed/ctt.key;

        location / {
            proxy_pass http://localhost:5678;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name kibana.ctt.tn;

        # certificats TLS
        ssl_certificate     /etc/nginx/self-signed/ctt.crt;
        ssl_certificate_key /etc/nginx/self-signed/ctt.key;

        # HSTS pour renforcer la sécurité
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # réécriture pour Kibana monté en racine
        location / {
            # 1. Proxy vers un backend HTTPS
            proxy_pass https://localhost:5601/;

            # 2. Activer SNI pour le backend et désactiver la vérification (self‑signed)
            proxy_ssl_server_name on;       # envoie le SNI “localhost” au backend :contentReference[oaicite:0]{index=0}
            proxy_ssl_verify       off;     # ignore les erreurs de certificat self‑signed :contentReference[oaicite:1]{index=1}

            # 3. Garder les en‑têtes utiles
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;

            # 4. Réécriture BasePath prise en charge uniquement par Nginx
            #    (Kibana doit avoir rewriteBasePath: false)
            #    Pas de rewrite ici si vous montez à “/”

            # 5. Forcer le cookie “sid” en Secure + SameSite=None
            proxy_cookie_path / "/; Secure; SameSite=None";
        }
    }
}




